{
  "address": "0x195dB7477081A6a11D194D6b4189a8C5f60ea66D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "participationFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentLotteryState",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numberParticipants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        }
      ],
      "name": "Lottery__CheckUpkeepFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__InsufficientParticipationFees",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__LotteryNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__TrasnferFundsToWinnerFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "LotteryEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winnerPicked",
          "type": "address"
        }
      ],
      "name": "RandomWinnerPicked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedLotteryWinner",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfParticipants",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getParticipant",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParticipants",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParticipationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentRandomWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3e85427027c6da4b47a30cfba8fca6dc87cc70893b216d277ce54035473ab8c2",
  "receipt": {
    "to": null,
    "from": "0xA057BF9b4EEbCdfF8EF76d84c459368456c08FB0",
    "contractAddress": "0x195dB7477081A6a11D194D6b4189a8C5f60ea66D",
    "transactionIndex": 101,
    "gasUsed": "1395241",
    "logsBloom": "0x
    "blockHash": "0x4e61d5d7f3403f58efc3e46f7994e889cacbc86b685c36909bba8a46842f848e",
    "transactionHash": "0x3e85427027c6da4b47a30cfba8fca6dc87cc70893b216d277ce54035473ab8c2",
    "logs": [],
    "blockNumber": 7882936,
    "cumulativeGasUsed": "16015916",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D",
    "10000000000000000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "4688",
    "2500000",
    "30"
  ],
  "numDeployments": 3,
  "solcInputHash": "4fc7625d2e31ee12da7d2a8eca29a345",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"participationFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentLotteryState\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"}],\"name\":\"Lottery__CheckUpkeepFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__InsufficientParticipationFees\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__LotteryNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__TrasnferFundsToWinnerFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LotteryEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winnerPicked\",\"type\":\"address\"}],\"name\":\"RandomWinnerPicked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedLotteryWinner\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getParticipant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParticipants\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParticipationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentRandomWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Carlos Vouking guided by Patrick Collins\",\"details\":\"made possible with chainlink vrf V2 subscription version and chainlink automation - keepers\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"cette function est invok\\u00e9e par le node chainlink. should normally UpkeepNeeded return 'true' Les conditions suivantes doivent \\u00eatre vraies pour que 'UpkeepNeeded' == true 1rst condition:: L'interval de temps devra \\u00eatre \\u00e9coul\\u00e9 2nd condition::  Il faudrait au moins un participant enregistr\\u00e9 dans la lotterie 3rd condition::  la souscription Chainlink doit avoir assez de LINK 4th condition::  La lotterie doit \\u00eatre encore en ouverte....Techniquement don't allow any new player to enter the lottery when waiting for the ranom winner. // checkData parameter can be very useful in making many advance things...                \"},\"performUpkeep(bytes)\":{\"details\":\"this function calls the 'checkUpKeep()' and excecutes if upKeepNeeded is true. returns an error is lottery is not open || if there are zero participants || if the subscription is empty.\"}},\"title\":\"Basic lottery contract\",\"version\":1},\"userdoc\":{\"events\":{\"LotteryEnter(address)\":{\"notice\":\"EVENTS \"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"FUNCTIONS \"},\"getParticipationFee()\":{\"notice\":\"VIEW & | PURE functions \"}},\"notice\":\"basic contract for a decentralized truly fair lottery\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"/** CONTRACT MAIN GOALS */\\n// 1- Allow anyone to enter the lottery by paying a certain amount in ETH\\n// 2- Select / Pick a random winner manually - Admin control\\n// 3- Select / Pick a random winner manually - randomly verfiable\\n// 4- Allow winner to be picked every (... minutes) randomly\\n// 5- Using Chainlink Oracle tools for randomness (VRF) and Automation (Automation / Keepers)\\n\\n//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nerror Lottery__InsufficientParticipationFees();\\nerror Lottery__TrasnferFundsToWinnerFailed();\\nerror Lottery__LotteryNotOpen();\\nerror Lottery__CheckUpkeepFailed(\\n    uint256 currentLotteryState,\\n    uint256 numberParticipants,\\n    uint256 currentBalance\\n);\\n\\n/** @title Basic lottery contract\\n * @author Carlos Vouking guided by Patrick Collins\\n * @notice basic contract for a decentralized truly fair lottery\\n * @dev made possible with chainlink vrf V2 subscription version and chainlink automation - keepers\\n */\\ncontract Lottery is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    /** DECLARING TYPES */\\n    enum LotteryState {\\n        OPEN, // 0\\n        PROCESSING, // 1\\n        CLOSE //2\\n    }\\n\\n    /** STATE VARIABLES */\\n    // minimum participation\\n    uint256 private immutable i_participationFee;\\n    // participants\\n    address payable[] private s_participants; // every participant can recieve a payment\\n    // coordinator interface..\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId; // storing subscriptionID in storage\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    // Raffle related state variables\\n    address private s_recentRandomWinner; // voorlopig empty = no random winner momenteel\\n    LotteryState private s_lotteryState;\\n    uint256 private s_previousTimeStamp;\\n    uint256 private immutable i_interval; // how long is sec we want to wait between lottery runs...\\n\\n    /**EVENTS */\\n    event LotteryEnter(address indexed player);\\n    event RequestedLotteryWinner(uint256 indexed requestId);\\n    event RandomWinnerPicked(address indexed winnerPicked);\\n\\n    /** FUNCTIONS */\\n\\n    // initializing items at contract deployment....vrfCoordinatorV2= address consumer contract from Remix to the subscription\\n    constructor(\\n        address vrfCoordinatorV2, // contract...will be deployed as a Mock\\n        uint256 participationFee,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    )\\n        VRFConsumerBaseV2(vrfCoordinatorV2) // Interface + Address => Consumer contract to interact with.\\n        AutomationCompatibleInterface()\\n    {\\n        i_participationFee = participationFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2); // Interface + Address => Coordinator contract to interact with\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_lotteryState = LotteryState.OPEN; // open the lottery at contract deployment\\n        s_previousTimeStamp = block.timestamp; // vlue saved in storage as soon contract loads.\\n        i_interval = interval;\\n    }\\n\\n    // enter Lottery\\n    function enterLottery() public payable {\\n        // minimum fee to enter lottery\\n        if (msg.value < i_participationFee) {\\n            revert Lottery__InsufficientParticipationFees(); // revert the whole transaction\\n        }\\n        // enter the lottery only if it's opened\\n        if (s_lotteryState != LotteryState.OPEN) {\\n            revert Lottery__LotteryNotOpen();\\n        }\\n        // enter only once\\n        // if(s_participants.includes((msg.sender))) {\\n\\n        // }\\n        s_participants.push(payable(msg.sender));\\n        // Emit Events... very useful when updating dynamic data structures:: mappings, arrays etc...\\n        emit LotteryEnter(msg.sender);\\n    }\\n\\n    //... computed from VRFCoordinatorV2Interface.sol\\n    function requestRandomWinner() external {\\n        // Random winner is being processed...\\n        s_lotteryState = LotteryState.PROCESSING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane, // or gasLane in wei, max gas price to pay for a random request\\n            i_subscriptionId, // ID of the subscription used to fund the VRFConsumerBaseV2(vrfCoordinatorV2) contract\\n            REQUEST_CONFIRMATIONS, // how many blocks to wait before recieving the random number response\\n            i_callbackGasLimit, // max gas limit for the computation of fulfillRandomWords() function\\n            NUM_WORDS // nber of random number we want per request\\n        );\\n        emit RequestedLotteryWinner(requestId);\\n    }\\n\\n    // computed from VRFConsumerBaseV2.sol\\n    function fulfillRandomWords(\\n        uint256, /*requestId*/\\n        uint256[] memory randomWords\\n    ) internal override {\\n        /*\\n           % modulo scenario to get the random winner: \\n            // s_players = [56, 789, 402, 78, 3254, 202, 91, 6587, 81, 65]\\n            // random number to be picked: 402\\n            // to goal of the modulo is to find the index of the random nmber to be picked\\n            randomWords[0] % s_players.length = indexRandomNumber\\n                 402       %        10        =       2\\n        */\\n        uint256 indexOfRandomWinner = randomWords[0] % s_participants.length;\\n        address payable recentRandomWinner = s_participants[indexOfRandomWinner]; // this is our very verifiably random winner.\\n        // assign / pick a recent winner\\n        s_recentRandomWinner = recentRandomWinner;\\n\\n        // re-open the Lottery after picking a winner\\n        s_lotteryState = LotteryState.OPEN;\\n\\n        // reset the participants list to zero\\n        s_participants = new address payable[](0);\\n\\n        // reset previous timestamp evert time a winner is picked to allow participation in a new interval\\n        s_previousTimeStamp = block.timestamp;\\n\\n        // transfer the money to the winner\\n        (bool success, ) = recentRandomWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Lottery__TrasnferFundsToWinnerFailed();\\n        }\\n        // write every random winner to the event log, so that we can query them previous winners at any time\\n        emit RandomWinnerPicked(recentRandomWinner);\\n    }\\n\\n    /**\\n     *  @dev cette function est invok\\u00e9e par le node chainlink. should normally UpkeepNeeded return 'true'\\n     * Les conditions suivantes doivent \\u00eatre vraies pour que 'UpkeepNeeded' == true\\n     * 1rst condition:: L'interval de temps devra \\u00eatre \\u00e9coul\\u00e9\\n     * 2nd condition::  Il faudrait au moins un participant enregistr\\u00e9 dans la lotterie\\n     * 3rd condition::  la souscription Chainlink doit avoir assez de LINK\\n     * 4th condition::  La lotterie doit \\u00eatre encore en ouverte....Techniquement don't allow any new player to enter\\n                        the lottery when waiting for the ranom winner.\\n\\n        // checkData parameter can be very useful in making many advance things...                \\n     */\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        // isLoterryOpen is true if the state is on OPEN state otherwise isLotteryOpen is false.\\n        bool isLotteryOpen = (LotteryState.OPEN == s_lotteryState);\\n        // check time interval between the previous block and the curent block timestamp...is true is enough time has passed\\n        bool elapsedTime = (i_interval < (block.timestamp - s_previousTimeStamp));\\n        // check at least 1 participant exists\\n        bool hasParticipant_s = (s_participants.length > 0);\\n        // check balance in LINK\\n        bool hasBalance = address(this).balance > 0;\\n        // returning UpkeepNeeded is all of above conditions are true..it's time to request a new random number and to close the lottery\\n        upkeepNeeded = (isLotteryOpen && elapsedTime && hasParticipant_s && hasBalance);\\n        //return (upkeepNeeded, \\\"0x0\\\");\\n    }\\n\\n    /**\\n     *  @dev this function calls the 'checkUpKeep()' and excecutes if upKeepNeeded is true.\\n     * returns an error is lottery is not open || if there are zero participants || if the subscription is empty.\\n     */\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        // upkeepNeeded should be 'true' to proceed..need to call 'checkUpkeep' to get the value of 'upKeepNeeded'\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Lottery__CheckUpkeepFailed(\\n                uint256(s_lotteryState),\\n                s_participants.length,\\n                address(this).balance\\n            );\\n        } else {\\n            /* execute requestRandomWinner()  */\\n            // Random winner is being processed...\\n            s_lotteryState = LotteryState.PROCESSING;\\n            uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n                i_gasLane, // or gasLane in wei, max gas price to pay for a random request\\n                i_subscriptionId, // ID of the subscription used to fund the VRFConsumerBaseV2(vrfCoordinatorV2) contract\\n                REQUEST_CONFIRMATIONS, // how many blocks to wait before recieving the random number response\\n                i_callbackGasLimit, // max gas limit for the computation of fulfillRandomWords() function\\n                NUM_WORDS // nber of random number we want per request\\n            );\\n            emit RequestedLotteryWinner(requestId);\\n        }\\n    }\\n\\n    fallback() external payable {}\\n\\n    receive() external payable {}\\n\\n    /** VIEW & | PURE functions */\\n    // read fee to enter the lottery\\n    function getParticipationFee() public view returns (uint256) {\\n        return i_participationFee;\\n    }\\n\\n    // read a specific participant\\n    function getParticipant(uint256 index) public view returns (address) {\\n        return s_participants[index];\\n    }\\n\\n    // read the recent random winner\\n    function getRecentRandomWinner() public view returns (address) {\\n        return s_recentRandomWinner;\\n    }\\n\\n    // state of the lottery\\n    function getLotteryState() public view returns (LotteryState) {\\n        return s_lotteryState;\\n    }\\n\\n    // get the number of words recieved...NUM_WORDS is read from bytecode. It is not in storage.\\n    function getNumberOfWords() public pure returns (uint256) {\\n        return NUM_WORDS; // return 1\\n    }\\n\\n    // get number of participants\\n    function getNumberOfParticipants() public view returns (uint256) {\\n        return s_participants.length;\\n    }\\n\\n    // participants' list\\n    function getParticipants() public view returns (address payable[] memory) {\\n        return s_participants;\\n    }\\n\\n    // current latest timestamp\\n    function getLatestTimeStamp() public view returns (uint256) {\\n        return s_previousTimeStamp;\\n    }\\n\\n    // request confirmations - nber of blocks confirmations -- reading from bytecode\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS; // return 3\\n    }\\n\\n    // get interval\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n}\\n\",\"keccak256\":\"0x1b526ede6664c5f1b5d6efd958c2a5c778b173f761e41217e9d2d4b8cb62d75a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001bb138038062001bb18339818101604052810190620000389190620002a0565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600160146101000a81548160ff021916908360028111156200011957620001186200033c565b5b0217905550426002819055508061014081815250505050505050506200036b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200016c826200013f565b9050919050565b6200017e816200015f565b81146200018a57600080fd5b50565b6000815190506200019e8162000173565b92915050565b6000819050919050565b620001b981620001a4565b8114620001c557600080fd5b50565b600081519050620001d981620001ae565b92915050565b6000819050919050565b620001f481620001df565b81146200020057600080fd5b50565b6000815190506200021481620001e9565b92915050565b600067ffffffffffffffff82169050919050565b62000239816200021a565b81146200024557600080fd5b50565b60008151905062000259816200022e565b92915050565b600063ffffffff82169050919050565b6200027a816200025f565b81146200028657600080fd5b50565b6000815190506200029a816200026f565b92915050565b60008060008060008060c08789031215620002c057620002bf6200013a565b5b6000620002d089828a016200018d565b9650506020620002e389828a01620001c8565b9550506040620002f689828a0162000203565b94505060606200030989828a0162000248565b93505060806200031c89828a0162000289565b92505060a06200032f89828a01620001c8565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c610140516117ae620004036000396000818161091601526109ad0152600081816105d8015261074e0152600081816105b5015261072b015260008181610594015261070a01526000818161055801526106ce01526000818161098501526109d30152600081816103d9015261042d01526117ae6000f3fe6080604052600436106100ec5760003560e01c80635f1b0fd81161008a578063863fc11e11610059578063863fc11e146102db57806391ad27b414610306578063c1af578514610331578063c80c28a21461033b576100f3565b80635f1b0fd81461021c5780636b68c03c146102475780636e04ff0d146102725780636f9d9c84146102b0576100f3565b8063320229eb116100c6578063320229eb146101865780634585e33b146101b1578063522a1f0b146101da5780635aa68ac0146101f1576100f3565b80630124cbff146100f55780631b9db2ef146101205780631fe543e31461015d576100f3565b366100f357005b005b34801561010157600080fd5b5061010a610366565b6040516101179190610e65565b60405180910390f35b34801561012c57600080fd5b5061014760048036038101906101429190610eca565b610390565b6040516101549190610e65565b60405180910390f35b34801561016957600080fd5b50610184600480360381019061017f9190611050565b6103d7565b005b34801561019257600080fd5b5061019b610497565b6040516101a891906110bb565b60405180910390f35b3480156101bd57600080fd5b506101d860048036038101906101d39190611131565b6104a1565b005b3480156101e657600080fd5b506101ef6106a0565b005b3480156101fd57600080fd5b50610206610813565b604051610213919061124e565b60405180910390f35b34801561022857600080fd5b506102316108a1565b60405161023e91906110bb565b60405180910390f35b34801561025357600080fd5b5061025c6108ae565b60405161026991906112e7565b60405180910390f35b34801561027e57600080fd5b50610299600480360381019061029491906113b7565b6108c5565b6040516102a79291906114a3565b60405180910390f35b3480156102bc57600080fd5b506102c5610972565b6040516102d291906110bb565b60405180910390f35b3480156102e757600080fd5b506102f0610981565b6040516102fd91906110bb565b60405180910390f35b34801561031257600080fd5b5061031b6109a9565b60405161032891906110bb565b60405180910390f35b6103396109d1565b005b34801561034757600080fd5b50610350610b40565b60405161035d91906110bb565b60405180910390f35b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008082815481106103a5576103a46114d3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461048957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610480929190611502565b60405180910390fd5b6104938282610b4c565b5050565b6000600254905090565b60006104bb604051806020016040528060008152506108c5565b5090508061052a57600160149054906101000a900460ff1660028111156104e5576104e4611270565b5b600080549050476040517ff62d55c20000000000000000000000000000000000000000000000000000000081526004016105219392919061152b565b60405180910390fd5b60018060146101000a81548160ff0219169083600281111561054f5761054e611270565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106199594939291906115da565b602060405180830381600087803b15801561063357600080fd5b505af1158015610647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066b9190611642565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b60018060146101000a81548160ff021916908360028111156106c5576106c4611270565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161078f9594939291906115da565b602060405180830381600087803b1580156107a957600080fd5b505af11580156107bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e19190611642565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250565b6060600080548060200260200160405190810160405280929190818152602001828054801561089757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161084d575b5050505050905090565b6000600361ffff16905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff1660028111156108ed576108ec611270565b5b6000600281111561090157610900611270565b5b149050600060025442610914919061169e565b7f0000000000000000000000000000000000000000000000000000000000000000109050600080600080549050119050600080471190508380156109555750825b801561095e5750815b80156109675750805b955050505050915091565b6000600163ffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610a2b576040517fd09adbcc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002811115610a3f57610a3e611270565b5b600160149054906101000a900460ff166002811115610a6157610a60611270565b5b14610a98576040517f823ea8bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b60008080549050905090565b6000808054905082600081518110610b6757610b666114d3565b5b6020026020010151610b799190611701565b90506000808281548110610b9057610b8f6114d3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836002811115610c2457610c23611270565b5b0217905550600067ffffffffffffffff811115610c4457610c43610f0d565b5b604051908082528060200260200182016040528015610c725781602001602082028036833780820191505090505b5060009080519060200190610c88929190610d7d565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610cb690611763565b60006040518083038185875af1925050503d8060008114610cf3576040519150601f19603f3d011682016040523d82523d6000602084013e610cf8565b606091505b5050905080610d33576040517f1ef894bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167fae47ec692e756c09d0aabe93cd92dc227fb7a1ef07b289b9dc64befcff27945a60405160405180910390a25050505050565b828054828255906000526020600020908101928215610df6579160200282015b82811115610df55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610d9d565b5b509050610e039190610e07565b5090565b5b80821115610e20576000816000905550600101610e08565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e4f82610e24565b9050919050565b610e5f81610e44565b82525050565b6000602082019050610e7a6000830184610e56565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610ea781610e94565b8114610eb257600080fd5b50565b600081359050610ec481610e9e565b92915050565b600060208284031215610ee057610edf610e8a565b5b6000610eee84828501610eb5565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f4582610efc565b810181811067ffffffffffffffff82111715610f6457610f63610f0d565b5b80604052505050565b6000610f77610e80565b9050610f838282610f3c565b919050565b600067ffffffffffffffff821115610fa357610fa2610f0d565b5b602082029050602081019050919050565b600080fd5b6000610fcc610fc784610f88565b610f6d565b90508083825260208201905060208402830185811115610fef57610fee610fb4565b5b835b8181101561101857806110048882610eb5565b845260208401935050602081019050610ff1565b5050509392505050565b600082601f83011261103757611036610ef7565b5b8135611047848260208601610fb9565b91505092915050565b6000806040838503121561106757611066610e8a565b5b600061107585828601610eb5565b925050602083013567ffffffffffffffff81111561109657611095610e8f565b5b6110a285828601611022565b9150509250929050565b6110b581610e94565b82525050565b60006020820190506110d060008301846110ac565b92915050565b600080fd5b60008083601f8401126110f1576110f0610ef7565b5b8235905067ffffffffffffffff81111561110e5761110d6110d6565b5b60208301915083600182028301111561112a57611129610fb4565b5b9250929050565b6000806020838503121561114857611147610e8a565b5b600083013567ffffffffffffffff81111561116657611165610e8f565b5b611172858286016110db565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006111b582610e24565b9050919050565b6111c5816111aa565b82525050565b60006111d783836111bc565b60208301905092915050565b6000602082019050919050565b60006111fb8261117e565b6112058185611189565b93506112108361119a565b8060005b8381101561124157815161122888826111cb565b9750611233836111e3565b925050600181019050611214565b5085935050505092915050565b6000602082019050818103600083015261126881846111f0565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106112b0576112af611270565b5b50565b60008190506112c18261129f565b919050565b60006112d1826112b3565b9050919050565b6112e1816112c6565b82525050565b60006020820190506112fc60008301846112d8565b92915050565b600080fd5b600067ffffffffffffffff82111561132257611321610f0d565b5b61132b82610efc565b9050602081019050919050565b82818337600083830152505050565b600061135a61135584611307565b610f6d565b90508281526020810184848401111561137657611375611302565b5b611381848285611338565b509392505050565b600082601f83011261139e5761139d610ef7565b5b81356113ae848260208601611347565b91505092915050565b6000602082840312156113cd576113cc610e8a565b5b600082013567ffffffffffffffff8111156113eb576113ea610e8f565b5b6113f784828501611389565b91505092915050565b60008115159050919050565b61141581611400565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561145557808201518184015260208101905061143a565b83811115611464576000848401525b50505050565b60006114758261141b565b61147f8185611426565b935061148f818560208601611437565b61149881610efc565b840191505092915050565b60006040820190506114b8600083018561140c565b81810360208301526114ca818461146a565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506115176000830185610e56565b6115246020830184610e56565b9392505050565b600060608201905061154060008301866110ac565b61154d60208301856110ac565b61155a60408301846110ac565b949350505050565b6000819050919050565b61157581611562565b82525050565b600067ffffffffffffffff82169050919050565b6115988161157b565b82525050565b600061ffff82169050919050565b6115b58161159e565b82525050565b600063ffffffff82169050919050565b6115d4816115bb565b82525050565b600060a0820190506115ef600083018861156c565b6115fc602083018761158f565b61160960408301866115ac565b61161660608301856115cb565b61162360808301846115cb565b9695505050505050565b60008151905061163c81610e9e565b92915050565b60006020828403121561165857611657610e8a565b5b60006116668482850161162d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006116a982610e94565b91506116b483610e94565b9250828210156116c7576116c661166f565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061170c82610e94565b915061171783610e94565b925082611727576117266116d2565b5b828206905092915050565b600081905092915050565b50565b600061174d600083611732565b91506117588261173d565b600082019050919050565b600061176e82611740565b915081905091905056fea2646970667358221220a62ff4b10b83c9b535be37753390a820d3b88f642c3cf977f8172eb61c0ec9dc64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100ec5760003560e01c80635f1b0fd81161008a578063863fc11e11610059578063863fc11e146102db57806391ad27b414610306578063c1af578514610331578063c80c28a21461033b576100f3565b80635f1b0fd81461021c5780636b68c03c146102475780636e04ff0d146102725780636f9d9c84146102b0576100f3565b8063320229eb116100c6578063320229eb146101865780634585e33b146101b1578063522a1f0b146101da5780635aa68ac0146101f1576100f3565b80630124cbff146100f55780631b9db2ef146101205780631fe543e31461015d576100f3565b366100f357005b005b34801561010157600080fd5b5061010a610366565b6040516101179190610e65565b60405180910390f35b34801561012c57600080fd5b5061014760048036038101906101429190610eca565b610390565b6040516101549190610e65565b60405180910390f35b34801561016957600080fd5b50610184600480360381019061017f9190611050565b6103d7565b005b34801561019257600080fd5b5061019b610497565b6040516101a891906110bb565b60405180910390f35b3480156101bd57600080fd5b506101d860048036038101906101d39190611131565b6104a1565b005b3480156101e657600080fd5b506101ef6106a0565b005b3480156101fd57600080fd5b50610206610813565b604051610213919061124e565b60405180910390f35b34801561022857600080fd5b506102316108a1565b60405161023e91906110bb565b60405180910390f35b34801561025357600080fd5b5061025c6108ae565b60405161026991906112e7565b60405180910390f35b34801561027e57600080fd5b50610299600480360381019061029491906113b7565b6108c5565b6040516102a79291906114a3565b60405180910390f35b3480156102bc57600080fd5b506102c5610972565b6040516102d291906110bb565b60405180910390f35b3480156102e757600080fd5b506102f0610981565b6040516102fd91906110bb565b60405180910390f35b34801561031257600080fd5b5061031b6109a9565b60405161032891906110bb565b60405180910390f35b6103396109d1565b005b34801561034757600080fd5b50610350610b40565b60405161035d91906110bb565b60405180910390f35b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008082815481106103a5576103a46114d3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461048957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610480929190611502565b60405180910390fd5b6104938282610b4c565b5050565b6000600254905090565b60006104bb604051806020016040528060008152506108c5565b5090508061052a57600160149054906101000a900460ff1660028111156104e5576104e4611270565b5b600080549050476040517ff62d55c20000000000000000000000000000000000000000000000000000000081526004016105219392919061152b565b60405180910390fd5b60018060146101000a81548160ff0219169083600281111561054f5761054e611270565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106199594939291906115da565b602060405180830381600087803b15801561063357600080fd5b505af1158015610647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066b9190611642565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b60018060146101000a81548160ff021916908360028111156106c5576106c4611270565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161078f9594939291906115da565b602060405180830381600087803b1580156107a957600080fd5b505af11580156107bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e19190611642565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250565b6060600080548060200260200160405190810160405280929190818152602001828054801561089757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161084d575b5050505050905090565b6000600361ffff16905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff1660028111156108ed576108ec611270565b5b6000600281111561090157610900611270565b5b149050600060025442610914919061169e565b7f0000000000000000000000000000000000000000000000000000000000000000109050600080600080549050119050600080471190508380156109555750825b801561095e5750815b80156109675750805b955050505050915091565b6000600163ffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610a2b576040517fd09adbcc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002811115610a3f57610a3e611270565b5b600160149054906101000a900460ff166002811115610a6157610a60611270565b5b14610a98576040517f823ea8bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b60008080549050905090565b6000808054905082600081518110610b6757610b666114d3565b5b6020026020010151610b799190611701565b90506000808281548110610b9057610b8f6114d3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836002811115610c2457610c23611270565b5b0217905550600067ffffffffffffffff811115610c4457610c43610f0d565b5b604051908082528060200260200182016040528015610c725781602001602082028036833780820191505090505b5060009080519060200190610c88929190610d7d565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610cb690611763565b60006040518083038185875af1925050503d8060008114610cf3576040519150601f19603f3d011682016040523d82523d6000602084013e610cf8565b606091505b5050905080610d33576040517f1ef894bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167fae47ec692e756c09d0aabe93cd92dc227fb7a1ef07b289b9dc64befcff27945a60405160405180910390a25050505050565b828054828255906000526020600020908101928215610df6579160200282015b82811115610df55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610d9d565b5b509050610e039190610e07565b5090565b5b80821115610e20576000816000905550600101610e08565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e4f82610e24565b9050919050565b610e5f81610e44565b82525050565b6000602082019050610e7a6000830184610e56565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610ea781610e94565b8114610eb257600080fd5b50565b600081359050610ec481610e9e565b92915050565b600060208284031215610ee057610edf610e8a565b5b6000610eee84828501610eb5565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f4582610efc565b810181811067ffffffffffffffff82111715610f6457610f63610f0d565b5b80604052505050565b6000610f77610e80565b9050610f838282610f3c565b919050565b600067ffffffffffffffff821115610fa357610fa2610f0d565b5b602082029050602081019050919050565b600080fd5b6000610fcc610fc784610f88565b610f6d565b90508083825260208201905060208402830185811115610fef57610fee610fb4565b5b835b8181101561101857806110048882610eb5565b845260208401935050602081019050610ff1565b5050509392505050565b600082601f83011261103757611036610ef7565b5b8135611047848260208601610fb9565b91505092915050565b6000806040838503121561106757611066610e8a565b5b600061107585828601610eb5565b925050602083013567ffffffffffffffff81111561109657611095610e8f565b5b6110a285828601611022565b9150509250929050565b6110b581610e94565b82525050565b60006020820190506110d060008301846110ac565b92915050565b600080fd5b60008083601f8401126110f1576110f0610ef7565b5b8235905067ffffffffffffffff81111561110e5761110d6110d6565b5b60208301915083600182028301111561112a57611129610fb4565b5b9250929050565b6000806020838503121561114857611147610e8a565b5b600083013567ffffffffffffffff81111561116657611165610e8f565b5b611172858286016110db565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006111b582610e24565b9050919050565b6111c5816111aa565b82525050565b60006111d783836111bc565b60208301905092915050565b6000602082019050919050565b60006111fb8261117e565b6112058185611189565b93506112108361119a565b8060005b8381101561124157815161122888826111cb565b9750611233836111e3565b925050600181019050611214565b5085935050505092915050565b6000602082019050818103600083015261126881846111f0565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106112b0576112af611270565b5b50565b60008190506112c18261129f565b919050565b60006112d1826112b3565b9050919050565b6112e1816112c6565b82525050565b60006020820190506112fc60008301846112d8565b92915050565b600080fd5b600067ffffffffffffffff82111561132257611321610f0d565b5b61132b82610efc565b9050602081019050919050565b82818337600083830152505050565b600061135a61135584611307565b610f6d565b90508281526020810184848401111561137657611375611302565b5b611381848285611338565b509392505050565b600082601f83011261139e5761139d610ef7565b5b81356113ae848260208601611347565b91505092915050565b6000602082840312156113cd576113cc610e8a565b5b600082013567ffffffffffffffff8111156113eb576113ea610e8f565b5b6113f784828501611389565b91505092915050565b60008115159050919050565b61141581611400565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561145557808201518184015260208101905061143a565b83811115611464576000848401525b50505050565b60006114758261141b565b61147f8185611426565b935061148f818560208601611437565b61149881610efc565b840191505092915050565b60006040820190506114b8600083018561140c565b81810360208301526114ca818461146a565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506115176000830185610e56565b6115246020830184610e56565b9392505050565b600060608201905061154060008301866110ac565b61154d60208301856110ac565b61155a60408301846110ac565b949350505050565b6000819050919050565b61157581611562565b82525050565b600067ffffffffffffffff82169050919050565b6115988161157b565b82525050565b600061ffff82169050919050565b6115b58161159e565b82525050565b600063ffffffff82169050919050565b6115d4816115bb565b82525050565b600060a0820190506115ef600083018861156c565b6115fc602083018761158f565b61160960408301866115ac565b61161660608301856115cb565b61162360808301846115cb565b9695505050505050565b60008151905061163c81610e9e565b92915050565b60006020828403121561165857611657610e8a565b5b60006116668482850161162d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006116a982610e94565b91506116b483610e94565b9250828210156116c7576116c661166f565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061170c82610e94565b915061171783610e94565b925082611727576117266116d2565b5b828206905092915050565b600081905092915050565b50565b600061174d600083611732565b91506117588261173d565b600082019050919050565b600061176e82611740565b915081905091905056fea2646970667358221220a62ff4b10b83c9b535be37753390a820d3b88f642c3cf977f8172eb61c0ec9dc64736f6c63430008080033",
  "devdoc": {
    "author": "Carlos Vouking guided by Patrick Collins",
    "details": "made possible with chainlink vrf V2 subscription version and chainlink automation - keepers",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "cette function est invokée par le node chainlink. should normally UpkeepNeeded return 'true' Les conditions suivantes doivent être vraies pour que 'UpkeepNeeded' == true 1rst condition:: L'interval de temps devra être écoulé 2nd condition::  Il faudrait au moins un participant enregistré dans la lotterie 3rd condition::  la souscription Chainlink doit avoir assez de LINK 4th condition::  La lotterie doit être encore en ouverte....Techniquement don't allow any new player to enter the lottery when waiting for the ranom winner. // checkData parameter can be very useful in making many advance things...                "
      },
      "performUpkeep(bytes)": {
        "details": "this function calls the 'checkUpKeep()' and excecutes if upKeepNeeded is true. returns an error is lottery is not open || if there are zero participants || if the subscription is empty."
      }
    },
    "title": "Basic lottery contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "LotteryEnter(address)": {
        "notice": "EVENTS "
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "FUNCTIONS "
      },
      "getParticipationFee()": {
        "notice": "VIEW & | PURE functions "
      }
    },
    "notice": "basic contract for a decentralized truly fair lottery",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 246,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_participants",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 263,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_recentRandomWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 266,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lotteryState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(LotteryState)240"
      },
      {
        "astId": 268,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_previousTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)240": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}